const int in1= 9 ;
const int in2 = 8 ;
const int in3 = 7;
const int in4 = 6;
const int ena = 10 ;
const int enb = 5;
char readchar;
String s="";
char r;
const int trigPin = 11;
const int echoPin = 12;
long duration;
int distance;
int Velocity= 150;
int S1,S2,S3;
void Forwardl(), Backwardl(), Rightl(), Leftl(), Stopl(),  Followerl();
float ReadPing ();



int volt=255;
void Forwardl ()
{

analogWrite(ena, Velocity);
analogWrite(enb, Velocity);
digitalWrite(in1, LOW); 
digitalWrite(in2, HIGH); 
digitalWrite(in3, LOW); 
digitalWrite(in4,HIGH);
}

void Backwardl ()
{

analogWrite(ena, Velocity);
analogWrite(enb, Velocity);
digitalWrite(in1, HIGH); 
digitalWrite(in2, LOW);
digitalWrite(in3, HIGH); 
digitalWrite(in4, LOW);
}

void Rightl ()
{

analogWrite(ena, Velocity);
analogWrite(enb, Velocity+50);
digitalWrite(in1, HIGH); 
digitalWrite(in2, LOW); 
digitalWrite(in3, LOW); 
digitalWrite(in4, HIGH); 
}

void Leftl () 
{

analogWrite(ena, Velocity);
analogWrite(enb, Velocity+50);
digitalWrite(in1, LOW); 
digitalWrite(in2, HIGH);
digitalWrite(in3, HIGH);
digitalWrite(in4, LOW); 
}
void Stopl () 
{
 
digitalWrite(in1, LOW); 
digitalWrite(in2, LOW); 
digitalWrite(in3, LOW); 
digitalWrite(in4, LOW);
}


void Followerl ()
{
if(S3 && !S2 && S1) //move forward
{
Serial. println( "forward" ) ;

Forwardl();
        if(S3 && S2 && S1) //Stop
{
  Serial. println( "forward" ) ;

Forwardl();
  }

}
if(S3 && !S2 && !S1) //move right
{
  Serial. println( "low right" ) ;
  Leftl();
        if(S3 && S2 && S1) //Stop
{
  Serial. println( "low right" ) ;
  Leftl();
  }
}

if(S3 && S2 && !S1) //move right
{
  Serial. println( "right" ) ;
  Leftl();
      if(S3 && S2 && S1) //Stop
{
  Serial. println( "right" ) ;
  Leftl();
  
  }
}

if(!S3 && !S2 && S1) //move left
{
  
  Serial. println( "low left" ) ;
  Rightl();
    if(S3 && S2 && S1) //Stop
{
  Serial. println( "low left" ) ;
  Rightl();
  }
}

if(!S3 && S2 && S1) //move left
{
  Serial. println( "left" ) ;
  Rightl();
  if(S3 && S2 && S1) //Stop
{
  Serial. println( "left" ) ;
  Rightl();
  
  }
}

if(!S3 && !S2 && !S1) //Stop
{
  Serial. println( "forward" ) ;
Forwardl();
if(S3 && S2 && S1) //Stop

{
  Serial. println( "forward" ) ;
Forwardl();
}


}



}
void Forward() {
   analogWrite(ena,volt);
   analogWrite(enb,volt);
  digitalWrite(in1,LOW);
  digitalWrite(in2,HIGH);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  }

void Backward()
{
    analogWrite(ena,volt);
   analogWrite(enb,volt);
  digitalWrite(in1,HIGH);
  digitalWrite(in2,LOW);
  digitalWrite(in3,HIGH);
  digitalWrite(in4,LOW);
}

void Right()
{
  analogWrite(enb,volt);
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  }
void Left()
{
  analogWrite(ena,volt);
  digitalWrite(in1,LOW);
  digitalWrite(in2,HIGH);
  digitalWrite(in3,LOW);
  digitalWrite(in4,LOW);
}

void Stop()
{
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,LOW);
}
const byte MOTOR_A =13;  // Motor 2 Interrupt Pin - INT 1 - Right Motor
//const byte MOTOR_B = 13;  // Motor 1 Interrupt Pin - INT 0 - Left Motor
 
// Constant for steps in disk
const float stepcount = 20.00;  // 20 Slots in disk, 
 
// Constant for wheel diameter
const float wheeldiameter = 64.00; // Wheel diameter in millimeters,
 
// Integers for pulse counters
volatile int counter_A = 0;
//volatile int counter_B = 0;


 
// Motor B pulse count ISR
//void ISR_countB()  
//{
 // counter_B++;  // increment Motor B counter value
//}
 
// Function to convert from centimeters to steps

int CMtoSteps(float cm) {
 
  int result;  // Final calculation result
  float circumference = (wheeldiameter * 3.14) / 10; // Calculate wheel circumference in cm
  float cm_step = circumference / stepcount;  // CM per Step
  
  float f_result = cm / cm_step;  // Calculate result as a float
  result = (int) f_result/8; // Convert to an integer (note this is NOT rounded)
  
  return result;  // End and return 
 Serial.println("result");
 Serial.println(result);
}
int CMtoSteps2(float cm) {
 
  int result;  // Final calculation result
  float circumference = (wheeldiameter * 3.14) / 10; // Calculate wheel circumference in cm
  float cm_step = circumference / stepcount;  // CM per Step
  
  float f_result = cm / cm_step;  // Calculate result as a float
  result = (int) f_result; // Convert to an integer (note this is NOT rounded)
  
  return result;  // End and return 
 Serial.println("result");
 Serial.println(result);
}
// Function to Move Forward
void MoveForward(int steps, int mspeed) 
{
    

      Serial.println("d5lna al fn ");
      Serial.println(steps);

   counter_A = 0;  //  reset counter A to zero
   
   // Go forward until step value is reached
   while (steps > counter_A ) {
       Forward();
   if(digitalRead(13)==HIGH)
  {

  if(digitalRead(13)==LOW)
  {
      counter_A++;
   Serial.println(counter_A);
  }
  if(counter_A>steps)
  {
    
    break;
    }
    
  }

   
   }
    
  // Stop when done
  analogWrite(ena, 0);
  analogWrite(enb, 0);
  counter_A = 0;  //  reset counter A to zero
 
}
 

// Function to Move in Reverse
void MoveReverse(int steps, int mspeed) 
{
   counter_A = 0;  //  reset counter A to zero
  // counter_B = 0;  //  reset counter B to zero
   
  Backward();
   
   // Go in reverse until step value is reached
   while (steps > counter_A ) {
   
    if (steps > counter_A) {
    analogWrite(ena, mspeed);
    } else {
    analogWrite(ena, 0);
    analogWrite(enb, 0);

    } 
   //if (steps > counter_B) {
   // analogWrite(enb, mspeed);
   //} 
  
    }
    
  // Stop when done
  Stop();
  counter_A = 0;  //  reset counter A to zero
  //counter_B = 0;  //  reset counter B to zero 
 
}
 void MoveRight(int steps, int mspeed) 
{
    Serial.println("d5lna al fn ");
      Serial.println(steps);

   counter_A = 0;  //  reset counter A to zero
         

   // Go forward until step value is reached
   while (steps > counter_A ) {
       analogWrite(enb,volt);
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
   if(digitalRead(13)==HIGH)
  {

  if(digitalRead(13)==LOW)
  {
      counter_A++;
   Serial.println(counter_A);
  }
  if(counter_A>steps)
  {
    
    break;
    }
    
  }

   
   }
    
  // Stop when done
  analogWrite(ena, 0);
  analogWrite(enb, 0);
  counter_A = 0;  //  reset counter A to zero
 

   
}


void setup()

{
Serial.begin(9600);
pinMode(in1, OUTPUT);//left side 
pinMode(in2, OUTPUT);//left 
pinMode(in3, OUTPUT);//right 
pinMode(in4, OUTPUT);//right 
pinMode(ena, OUTPUT);//enable a  left
pinMode(enb, OUTPUT);//enable b   right
pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
pinMode(echoPin, INPUT); // Sets the echoPin as an Input
pinMode(MOTOR_A, INPUT_PULLUP);//enable b   right
pinMode(S1, INPUT);//LINEFOLLOWER
pinMode(S2, INPUT);
pinMode(S3,INPUT);


pinMode(13,INPUT);


}
void loop()
{
  digitalWrite(trigPin, LOW);
delayMicroseconds(2);
// Sets the trigPin on HIGH state for 10 micro seconds
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
// Reads the echoPin, returns the sound wave travel time in microseconds
duration = pulseIn(echoPin, HIGH);
// Calculating the distance
distance= duration*0.034/2;
if(distance<= 12)
{
Stop();
}
else{
if(Serial.available()>0)
{
readchar=Serial.read();

if(readchar=='B')
 Backward();
  

if(readchar=='F')
  Forward();

 
  if(readchar=='R')
      Right();
   
  if(readchar=='L')
    Left();

  
if(readchar=='S')
  Stop();
  

  if (readchar=='f')
  
  {
        Serial.println("helloogikfjhcjhjhv");
    delay(5000);
    while(Serial.available()>0)
{
      r=Serial.read();
          Serial.println(r);
          if(r=='m')
          {break;}
          else{
            s=s+r;
            }
}
int m= s.toInt();

          Serial.println("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm");

          Serial.println(m);

 MoveForward(CMtoSteps(m), 80);    
   
    
  Serial.println("result");
  s=" ";
 }

 if (readchar=='b')
  {
         Serial.println("helloogikfjhcjhjhv");
    delay(5000);
    while(Serial.available()>0)
{
      r=Serial.read();
          Serial.println(r);
          if(r=='m')
          {break;}
          else{
            s=s+r;
            }
}
int m= s.toInt();

          Serial.println("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm");

          Serial.println(m);

   MoveReverse(CMtoSteps(m),80);

  Serial.println("result");
  s=" ";
  }
  
if (readchar=='a')
  
  {
        Serial.println("helloogikfjhcjhjhv");
    delay(5000);
    while(Serial.available()>0)
{
      r=Serial.read();//angle
          Serial.println(r);
          if(r=='m')
          {break;}
          else{
            s=s+r;
            }
           
            
        
}
int m= s.toInt();
          Serial.println("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm");
          Serial.println(m);
          
    analogWrite(ena,150);         
  analogWrite(enb,150);
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  digitalWrite(in3,HIGH);
  digitalWrite(in4,LOW);
  delay(m*0.0064);


 //x*0.0064
           Forward();
           delay(500); 
  s=" ";
 }

//===================================================================================
  if (readchar=='K')
{
  //infinty loop 

   analogWrite(ena,200);
 analogWrite(enb,80);
 digitalWrite(in1,LOW);
 digitalWrite(in2,HIGH);
 digitalWrite(in3,LOW);
 digitalWrite(in4,HIGH);
 delay(4000);

 analogWrite(ena,70);
 analogWrite(enb,220);
 digitalWrite(in1,LOW);
 digitalWrite(in2,HIGH);
 digitalWrite(in3,LOW);
 digitalWrite(in4,HIGH);
 delay(4400);

  analogWrite(ena,90);
 analogWrite(enb,220);
 digitalWrite(in1,LOW);
 digitalWrite(in2,LOW);
 digitalWrite(in3,LOW);
 digitalWrite(in4,LOW);
 delay(25000);
 //rectangle 
 analogWrite(ena,100);
  analogWrite(enb,100);
  digitalWrite(in1,LOW);
  digitalWrite(in2,HIGH);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  delay(2000);
  
  analogWrite(ena,100);
  analogWrite(enb,100);
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  delay(600);

  analogWrite(ena,100);
  analogWrite(enb,100);
  digitalWrite(in1,LOW);
  digitalWrite(in2,HIGH);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  delay(2000);
  
  analogWrite(ena,100);
  analogWrite(enb,100);
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  delay(600);

  analogWrite(ena,100);
  analogWrite(enb,100);
  digitalWrite(in1,LOW);
  digitalWrite(in2,HIGH);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  delay(2000);
  
  analogWrite(ena,100);
  analogWrite(enb,100);
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  delay(600);

  analogWrite(ena,100);
  analogWrite(enb,100);
  digitalWrite(in1,LOW);
  digitalWrite(in2,HIGH);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  delay(2000);
  
  analogWrite(ena,100);
  analogWrite(enb,100);
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  delay(600);

  analogWrite(ena,100);
  analogWrite(enb,100);
  digitalWrite(in1,LOW);
  digitalWrite(in2,HIGH);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  delay(2000);
  
  analogWrite(ena,100);
  analogWrite(enb,100);
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  delay(600);
  analogWrite(ena,100);
  analogWrite(enb,100);
  digitalWrite(in1,LOW);
  digitalWrite(in2,HIGH);
  digitalWrite(in3,LOW);
  digitalWrite(in4,HIGH);
  delay(2000);
  
  analogWrite(ena,100);
  analogWrite(enb,100);
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,LOW);
  delay(25000);
  

  //circle
    analogWrite(ena,150);
  analogWrite(enb,100);
 digitalWrite(in1,LOW);
 digitalWrite(in2,HIGH);
 digitalWrite(in3,LOW);
 digitalWrite(in4,HIGH);
 delay(10000);
 
analogWrite(ena,100);
  analogWrite(enb,100);
  digitalWrite(in1,LOW);
  digitalWrite(in2,LOW);
  digitalWrite(in3,LOW);
  digitalWrite(in4,LOW);
  delay(25000);
 
  
  
  
  
  
  
}
if (readchar=='T')
{
  S1 = digitalRead(2);
S2 = digitalRead(4);
S3 = digitalRead(3);


Followerl();

  }
  }
  
}
}
